{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","start","clickNext","props","step","itemWidth","frameSize","images","infinite","maxTransition","length","setState","clickPrev","this","animationDuration","className","style","width","transform","transitionDuration","map","image","height","src","alt","slice","lastIndexOf","type","onClick","Component","App","handleEvent","event","target","name","value","onChange","min","max","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.65f85509.chunk.js","sourcesContent":["/* eslint-disable react/no-access-state-in-setstate */\nimport './Carousel.scss';\nimport { Component } from 'react';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n\n};\n\ntype State = {\n  start: number;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    start: 0,\n  };\n\n  clickNext = () => {\n    const {\n      step,\n      itemWidth,\n      frameSize,\n      images,\n      infinite,\n    } = this.props;\n\n    const maxTransition = (images.length * itemWidth) - (frameSize * itemWidth);\n\n    if (infinite && this.state.start <= -maxTransition) {\n      this.setState({\n        start: (this.state.start) === -maxTransition\n          ? (frameSize * itemWidth)\n          : 0,\n      });\n    }\n\n    this.setState(state => ({\n      start: (state.start - (step * itemWidth)) < -maxTransition\n        ? -maxTransition\n        : (state.start - (step * itemWidth)),\n    }));\n  };\n\n  clickPrev = () => {\n    const {\n      step,\n      itemWidth,\n      frameSize,\n      images,\n      infinite,\n    } = this.props;\n\n    const maxTransition = (images.length * itemWidth)\n      - (frameSize * itemWidth) + (step * itemWidth);\n\n    if (infinite && this.state.start >= 0) {\n      this.setState({\n        start: (this.state.start) === 0\n          ? -maxTransition\n          : -(images.length * itemWidth),\n      });\n    }\n\n    this.setState(state => ({\n      start: (state.start + (step * itemWidth)) > 0\n        ? 0\n        : (state.start + (step * itemWidth)),\n    }));\n  };\n\n  render() {\n    const { start } = this.state;\n    const {\n      images,\n      itemWidth,\n      frameSize,\n      animationDuration,\n    } = this.props;\n\n    return (\n      <div className=\"Carousel\">\n        <div\n          className=\"Carousel__wrapper\"\n          style={{ width: itemWidth * frameSize }}\n        >\n          <ul\n            className=\"Carousel__list\"\n            style={{\n              transform: `translate(${start}px)`, transitionDuration: `${animationDuration}ms`,\n            }}\n          >\n            {images.map(image => (\n              <li\n                style={{ height: itemWidth }}\n                key={image}\n                className=\"Carousel__item\"\n              >\n                <img\n                  style={{ width: itemWidth }}\n                  src={image}\n                  alt={image.slice(image.lastIndexOf('/') + 1, -4)}\n                />\n              </li>\n            ))}\n          </ul>\n        </div>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={this.clickPrev}\n          >\n            Prev\n          </button>\n\n          <button\n            className=\"Carousel__button\"\n            type=\"button\"\n            onClick={this.clickNext}\n            data-cy=\"next\"\n          >\n            Next\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import './App.scss';\nimport React, { ChangeEvent } from 'react';\nimport { Carousel } from './components/Carousel';\n\ninterface State {\n  images: string[],\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  handleEvent = (event: ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    if (name === 'infinite') {\n      this.setState(state => ({\n        [name]: !state.infinite,\n      }));\n    } else {\n      this.setState({ [name]: +value } as any);\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n         <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n        <form className=\"App__form\">\n          <label className=\"App__field\">\n            Step\n            <input\n              name=\"step\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleEvent}\n              value={step}\n              min=\"1\"\n              max=\"10\"\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Frame Size\n            <input\n              name=\"frameSize\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleEvent}\n              value={frameSize}\n              min=\"0\"\n              max=\"10\"\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Item Width\n            <input\n              name=\"itemWidth\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleEvent}\n              value={itemWidth}\n              min=\"0\"\n              max=\"400\"\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Animation Duration\n            <input\n              name=\"animationDuration\"\n              className=\"App__input\"\n              type=\"number\"\n              onChange={this.handleEvent}\n              value={animationDuration}\n              min=\"0\"\n              max=\"10000\"\n            />\n          </label>\n\n          <label className=\"App__field\">\n            Infinite\n            <input\n              type=\"checkbox\"\n              name=\"infinite\"\n              onChange={this.handleEvent}\n            />\n          </label>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}